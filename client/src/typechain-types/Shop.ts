/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Shop {
  export type OfferStruct = {
    id: PromiseOrValue<BigNumberish>;
    contentId: PromiseOrValue<string>;
    quantity: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    category: PromiseOrValue<BigNumberish>;
    archived: PromiseOrValue<boolean>;
  };

  export type OfferStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    contentId: string;
    quantity: BigNumber;
    price: BigNumber;
    category: BigNumber;
    archived: boolean;
  };

  export type SaleStruct = {
    id: PromiseOrValue<BigNumberish>;
    offerId: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    quantity: PromiseOrValue<BigNumberish>;
  };

  export type SaleStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    offerId: BigNumber;
    buyer: string;
    price: BigNumber;
    quantity: BigNumber;
  };
}

export interface ShopInterface extends utils.Interface {
  functions: {
    "archiveOffer(uint256)": FunctionFragment;
    "buyProduct(uint256,uint256)": FunctionFragment;
    "changeOfferContent(uint256,string,string,string)": FunctionFragment;
    "changeOfferPrice(uint256,uint256)": FunctionFragment;
    "createOffer(string,string,string[],string,uint256,uint256,uint256)": FunctionFragment;
    "getId()": FunctionFragment;
    "getIsOffersSuspended()": FunctionFragment;
    "getName()": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getOffersCount()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPaymentAddress()": FunctionFragment;
    "getSale(uint256)": FunctionFragment;
    "getSalesCount()": FunctionFragment;
    "suspend()": FunctionFragment;
    "unsuspend()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "archiveOffer"
      | "buyProduct"
      | "changeOfferContent"
      | "changeOfferPrice"
      | "createOffer"
      | "getId"
      | "getIsOffersSuspended"
      | "getName"
      | "getOffer"
      | "getOffersCount"
      | "getOwner"
      | "getPaymentAddress"
      | "getSale"
      | "getSalesCount"
      | "suspend"
      | "unsuspend"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "archiveOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOfferContent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOfferPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIsOffersSuspended",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffersCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaymentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalesCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "suspend", values?: undefined): string;
  encodeFunctionData(functionFragment: "unsuspend", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "archiveOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOfferContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOfferPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIsOffersSuspended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOffersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSalesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unsuspend", data: BytesLike): Result;

  events: {
    "OfferArchived(uint256)": EventFragment;
    "OfferContentChanged(uint256,string,string,string)": EventFragment;
    "OfferCreated(uint256,uint256,string,string,string[],string,uint256,uint256,uint256)": EventFragment;
    "OfferPriceChanged(uint256,uint256)": EventFragment;
    "OffersSuspended()": EventFragment;
    "OffersUnsuspended()": EventFragment;
    "SaleCreated(uint256,uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OfferArchived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferContentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffersSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffersUnsuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
}

export interface OfferArchivedEventObject {
  id: BigNumber;
}
export type OfferArchivedEvent = TypedEvent<
  [BigNumber],
  OfferArchivedEventObject
>;

export type OfferArchivedEventFilter = TypedEventFilter<OfferArchivedEvent>;

export interface OfferContentChangedEventObject {
  id: BigNumber;
  title: string;
  description: string;
  contentId: string;
}
export type OfferContentChangedEvent = TypedEvent<
  [BigNumber, string, string, string],
  OfferContentChangedEventObject
>;

export type OfferContentChangedEventFilter =
  TypedEventFilter<OfferContentChangedEvent>;

export interface OfferCreatedEventObject {
  id: BigNumber;
  shopId: BigNumber;
  title: string;
  description: string;
  images: string[];
  contentId: string;
  quantity: BigNumber;
  price: BigNumber;
  category: BigNumber;
}
export type OfferCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferPriceChangedEventObject {
  id: BigNumber;
  price: BigNumber;
}
export type OfferPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OfferPriceChangedEventObject
>;

export type OfferPriceChangedEventFilter =
  TypedEventFilter<OfferPriceChangedEvent>;

export interface OffersSuspendedEventObject {}
export type OffersSuspendedEvent = TypedEvent<[], OffersSuspendedEventObject>;

export type OffersSuspendedEventFilter = TypedEventFilter<OffersSuspendedEvent>;

export interface OffersUnsuspendedEventObject {}
export type OffersUnsuspendedEvent = TypedEvent<
  [],
  OffersUnsuspendedEventObject
>;

export type OffersUnsuspendedEventFilter =
  TypedEventFilter<OffersUnsuspendedEvent>;

export interface SaleCreatedEventObject {
  id: BigNumber;
  shopId: BigNumber;
  offerId: BigNumber;
  buyer: string;
  price: BigNumber;
  quantity: BigNumber;
  newQuantity: BigNumber;
}
export type SaleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  SaleCreatedEventObject
>;

export type SaleCreatedEventFilter = TypedEventFilter<SaleCreatedEvent>;

export interface Shop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    archiveOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyProduct(
      _offerId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOfferContent(
      _id: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contentId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOfferPrice(
      _id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOffer(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _images: PromiseOrValue<string>[],
      _contentId: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _category: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIsOffersSuspended(overrides?: CallOverrides): Promise<[boolean]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Shop.OfferStructOutput]>;

    getOffersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPaymentAddress(overrides?: CallOverrides): Promise<[string]>;

    getSale(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Shop.SaleStructOutput]>;

    getSalesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    suspend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsuspend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  archiveOffer(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyProduct(
    _offerId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOfferContent(
    _id: PromiseOrValue<BigNumberish>,
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _contentId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOfferPrice(
    _id: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOffer(
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _images: PromiseOrValue<string>[],
    _contentId: PromiseOrValue<string>,
    _quantity: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _category: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getId(overrides?: CallOverrides): Promise<BigNumber>;

  getIsOffersSuspended(overrides?: CallOverrides): Promise<boolean>;

  getName(overrides?: CallOverrides): Promise<string>;

  getOffer(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Shop.OfferStructOutput>;

  getOffersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPaymentAddress(overrides?: CallOverrides): Promise<string>;

  getSale(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Shop.SaleStructOutput>;

  getSalesCount(overrides?: CallOverrides): Promise<BigNumber>;

  suspend(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsuspend(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    archiveOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyProduct(
      _offerId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOfferContent(
      _id: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contentId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOfferPrice(
      _id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOffer(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _images: PromiseOrValue<string>[],
      _contentId: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _category: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getIsOffersSuspended(overrides?: CallOverrides): Promise<boolean>;

    getName(overrides?: CallOverrides): Promise<string>;

    getOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Shop.OfferStructOutput>;

    getOffersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPaymentAddress(overrides?: CallOverrides): Promise<string>;

    getSale(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Shop.SaleStructOutput>;

    getSalesCount(overrides?: CallOverrides): Promise<BigNumber>;

    suspend(overrides?: CallOverrides): Promise<void>;

    unsuspend(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OfferArchived(uint256)"(id?: null): OfferArchivedEventFilter;
    OfferArchived(id?: null): OfferArchivedEventFilter;

    "OfferContentChanged(uint256,string,string,string)"(
      id?: null,
      title?: null,
      description?: null,
      contentId?: null
    ): OfferContentChangedEventFilter;
    OfferContentChanged(
      id?: null,
      title?: null,
      description?: null,
      contentId?: null
    ): OfferContentChangedEventFilter;

    "OfferCreated(uint256,uint256,string,string,string[],string,uint256,uint256,uint256)"(
      id?: null,
      shopId?: null,
      title?: null,
      description?: null,
      images?: null,
      contentId?: null,
      quantity?: null,
      price?: null,
      category?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      id?: null,
      shopId?: null,
      title?: null,
      description?: null,
      images?: null,
      contentId?: null,
      quantity?: null,
      price?: null,
      category?: null
    ): OfferCreatedEventFilter;

    "OfferPriceChanged(uint256,uint256)"(
      id?: null,
      price?: null
    ): OfferPriceChangedEventFilter;
    OfferPriceChanged(id?: null, price?: null): OfferPriceChangedEventFilter;

    "OffersSuspended()"(): OffersSuspendedEventFilter;
    OffersSuspended(): OffersSuspendedEventFilter;

    "OffersUnsuspended()"(): OffersUnsuspendedEventFilter;
    OffersUnsuspended(): OffersUnsuspendedEventFilter;

    "SaleCreated(uint256,uint256,uint256,address,uint256,uint256,uint256)"(
      id?: null,
      shopId?: null,
      offerId?: null,
      buyer?: null,
      price?: null,
      quantity?: null,
      newQuantity?: null
    ): SaleCreatedEventFilter;
    SaleCreated(
      id?: null,
      shopId?: null,
      offerId?: null,
      buyer?: null,
      price?: null,
      quantity?: null,
      newQuantity?: null
    ): SaleCreatedEventFilter;
  };

  estimateGas: {
    archiveOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyProduct(
      _offerId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOfferContent(
      _id: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contentId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOfferPrice(
      _id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOffer(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _images: PromiseOrValue<string>[],
      _contentId: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _category: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getId(overrides?: CallOverrides): Promise<BigNumber>;

    getIsOffersSuspended(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSale(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalesCount(overrides?: CallOverrides): Promise<BigNumber>;

    suspend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsuspend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    archiveOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyProduct(
      _offerId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOfferContent(
      _id: PromiseOrValue<BigNumberish>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contentId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOfferPrice(
      _id: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOffer(
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _images: PromiseOrValue<string>[],
      _contentId: PromiseOrValue<string>,
      _quantity: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _category: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsOffersSuspended(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOffer(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaymentAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSale(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSalesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suspend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsuspend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
